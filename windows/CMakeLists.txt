# The Flutter tooling requires that developers have a version of Visual Studio
# installed that includes CMake 3.14 or later. You should not increase this
# version, as doing so will cause the plugin to fail to compile for some
# customers of the plugin.
cmake_minimum_required(VERSION 3.14)

# Project-level configuration.
set(PROJECT_NAME "system_proxy_resolver")
project(${PROJECT_NAME} LANGUAGES CXX C)

# Set as required by ../third_party/dart-sdk/sources.cmake included below
set(DARTSDK_ROOT ../third_party/dart-sdk/)

# Import sources generated by tools/update-dart-sdk.py
# This provides variables, and requires DARTSDK_ROOT to be set.
#  - dart_dl_sources
include(
  ../third_party/dart-sdk/sources.cmake
)

add_library(${PROJECT_NAME} SHARED
  "system_proxy_resolver.cpp"
  ${dart_dl_sources}
)

#set_target_properties(${PROJECT_NAME} PROPERTIES
#  PUBLIC_HEADER system_proxy_resolver.h
#  OUTPUT_NAME "system_proxy_resolver"
#)

target_link_libraries(${PROJECT_NAME} PRIVATE Winhttp.lib)
target_compile_definitions(${PROJECT_NAME} PUBLIC DART_SHARED_LIB)
target_include_directories(${PROJECT_NAME} INTERFACE
  ../src/
  ../third_party/dart-sdk/src/runtime/include/
)
include_directories(INTERFACE
  ../src/
  ../third_party/dart-sdk/src/runtime/include/
)
# Silence dart_api_dl.c(24,67):
# warning C4152: nonstandard extension, function/data pointer conversion in expression
# error C2220: the following warning is treated as an error
target_compile_options(${PROJECT_NAME} PRIVATE /wd4152)

# List of absolute paths to libraries that should be bundled with the plugin.
# This list could contain prebuilt libraries, or libraries created by an
# external build triggered from this build file.
set(system_proxy_resolver_bundled_libraries
  $<TARGET_FILE:system_proxy_resolver>
  PARENT_SCOPE
)
