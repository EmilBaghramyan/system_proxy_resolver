// ignore_for_file: type=lint
export 'winhttp_shims.dart';

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:win32/win32.dart' as win32;

/// Bindings for `Winhttp.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class WinHttpBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WinHttpBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WinHttpBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  WINHTTP_STATUS_CALLBACK WinHttpSetStatusCallback(
    ffi.Pointer<ffi.Void> hInternet,
    WINHTTP_STATUS_CALLBACK lpfnInternetCallback,
    int dwNotificationFlags,
    int dwReserved,
  ) {
    return _WinHttpSetStatusCallback(
      hInternet,
      lpfnInternetCallback,
      dwNotificationFlags,
      dwReserved,
    );
  }

  late final _WinHttpSetStatusCallbackPtr = _lookup<
      ffi.NativeFunction<
          WINHTTP_STATUS_CALLBACK Function(
              ffi.Pointer<ffi.Void>,
              WINHTTP_STATUS_CALLBACK,
              ffi.UnsignedLong,
              ffi.UnsignedLongLong)>>('WinHttpSetStatusCallback');
  late final _WinHttpSetStatusCallback =
      _WinHttpSetStatusCallbackPtr.asFunction<
          WINHTTP_STATUS_CALLBACK Function(
              ffi.Pointer<ffi.Void>, WINHTTP_STATUS_CALLBACK, int, int)>();

  ffi.Pointer<ffi.Void> WinHttpOpen(
    ffi.Pointer<ffi.WChar> pszAgentW,
    int dwAccessType,
    ffi.Pointer<ffi.WChar> pszProxyW,
    ffi.Pointer<ffi.WChar> pszProxyBypassW,
    int dwFlags,
  ) {
    return _WinHttpOpen(
      pszAgentW,
      dwAccessType,
      pszProxyW,
      pszProxyBypassW,
      dwFlags,
    );
  }

  late final _WinHttpOpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedLong)>>('WinHttpOpen');
  late final _WinHttpOpen = _WinHttpOpenPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int WinHttpCloseHandle(
    ffi.Pointer<ffi.Void> hInternet,
  ) {
    return _WinHttpCloseHandle(
      hInternet,
    );
  }

  late final _WinHttpCloseHandlePtr =
      _lookup<ffi.NativeFunction<win32.BOOL Function(ffi.Pointer<ffi.Void>)>>(
          'WinHttpCloseHandle');
  late final _WinHttpCloseHandle =
      _WinHttpCloseHandlePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int WinHttpGetProxyForUrl(
    ffi.Pointer<ffi.Void> hSession,
    ffi.Pointer<ffi.WChar> lpcwszUrl,
    ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS> pAutoProxyOptions,
    ffi.Pointer<WINHTTP_PROXY_INFO> pProxyInfo,
  ) {
    return _WinHttpGetProxyForUrl(
      hSession,
      lpcwszUrl,
      pAutoProxyOptions,
      pProxyInfo,
    );
  }

  late final _WinHttpGetProxyForUrlPtr = _lookup<
      ffi.NativeFunction<
          win32.BOOL Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS>,
              ffi.Pointer<WINHTTP_PROXY_INFO>)>>('WinHttpGetProxyForUrl');
  late final _WinHttpGetProxyForUrl = _WinHttpGetProxyForUrlPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS>,
          ffi.Pointer<WINHTTP_PROXY_INFO>)>();

  int WinHttpCreateProxyResolver(
    ffi.Pointer<ffi.Void> hSession,
    ffi.Pointer<ffi.Pointer<ffi.Void>> phResolver,
  ) {
    return _WinHttpCreateProxyResolver(
      hSession,
      phResolver,
    );
  }

  late final _WinHttpCreateProxyResolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'WinHttpCreateProxyResolver');
  late final _WinHttpCreateProxyResolver =
      _WinHttpCreateProxyResolverPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int WinHttpGetProxyForUrlEx(
    ffi.Pointer<ffi.Void> hResolver,
    ffi.Pointer<ffi.WChar> pcwszUrl,
    ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS> pAutoProxyOptions,
    int pContext,
  ) {
    return _WinHttpGetProxyForUrlEx(
      hResolver,
      pcwszUrl,
      pAutoProxyOptions,
      pContext,
    );
  }

  late final _WinHttpGetProxyForUrlExPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS>,
              ffi.UnsignedLongLong)>>('WinHttpGetProxyForUrlEx');
  late final _WinHttpGetProxyForUrlEx = _WinHttpGetProxyForUrlExPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<WINHTTP_AUTOPROXY_OPTIONS>, int)>();

  int WinHttpGetProxyResult(
    ffi.Pointer<ffi.Void> hResolver,
    ffi.Pointer<WINHTTP_PROXY_RESULT> pProxyResult,
  ) {
    return _WinHttpGetProxyResult(
      hResolver,
      pProxyResult,
    );
  }

  late final _WinHttpGetProxyResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<WINHTTP_PROXY_RESULT>)>>('WinHttpGetProxyResult');
  late final _WinHttpGetProxyResult = _WinHttpGetProxyResultPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<WINHTTP_PROXY_RESULT>)>();

  void WinHttpFreeProxyResult(
    ffi.Pointer<WINHTTP_PROXY_RESULT> pProxyResult,
  ) {
    return _WinHttpFreeProxyResult(
      pProxyResult,
    );
  }

  late final _WinHttpFreeProxyResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WINHTTP_PROXY_RESULT>)>>('WinHttpFreeProxyResult');
  late final _WinHttpFreeProxyResult = _WinHttpFreeProxyResultPtr.asFunction<
      void Function(ffi.Pointer<WINHTTP_PROXY_RESULT>)>();

  int WinHttpGetIEProxyConfigForCurrentUser(
    ffi.Pointer<WINHTTP_CURRENT_USER_IE_PROXY_CONFIG> pProxyConfig,
  ) {
    return _WinHttpGetIEProxyConfigForCurrentUser(
      pProxyConfig,
    );
  }

  late final _WinHttpGetIEProxyConfigForCurrentUserPtr = _lookup<
          ffi.NativeFunction<
              win32.BOOL Function(
                  ffi.Pointer<WINHTTP_CURRENT_USER_IE_PROXY_CONFIG>)>>(
      'WinHttpGetIEProxyConfigForCurrentUser');
  late final _WinHttpGetIEProxyConfigForCurrentUser =
      _WinHttpGetIEProxyConfigForCurrentUserPtr.asFunction<
          int Function(ffi.Pointer<WINHTTP_CURRENT_USER_IE_PROXY_CONFIG>)>();

  late final ffi.Pointer<WINHTTP_STATUS_CALLBACK> _winHttpStatusCallback =
      _lookup<WINHTTP_STATUS_CALLBACK>('winHttpStatusCallback');

  WINHTTP_STATUS_CALLBACK get winHttpStatusCallback =>
      _winHttpStatusCallback.value;

  set winHttpStatusCallback(WINHTTP_STATUS_CALLBACK value) =>
      _winHttpStatusCallback.value = value;

  ffi.Pointer<ffi.Void> initializeWinHttpSession(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Int64, ffi.Pointer<ffi.Dart_CObject>)>>
        apiDlData,
  ) {
    return _initializeWinHttpSession(
      apiDlData,
    );
  }

  late final _initializeWinHttpSessionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(
                              ffi.Int64, ffi.Pointer<ffi.Dart_CObject>)>>)>>(
      'initializeWinHttpSession');
  late final _initializeWinHttpSession =
      _initializeWinHttpSessionPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Int64, ffi.Pointer<ffi.Dart_CObject>)>>)>();

  void freeWinHttpStatusCallbackResult(
    ffi.Pointer<WinHttpStatusCallbackResult> result,
  ) {
    return _freeWinHttpStatusCallbackResult(
      result,
    );
  }

  late final _freeWinHttpStatusCallbackResultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<WinHttpStatusCallbackResult>)>>(
      'freeWinHttpStatusCallbackResult');
  late final _freeWinHttpStatusCallbackResult =
      _freeWinHttpStatusCallbackResultPtr.asFunction<
          void Function(ffi.Pointer<WinHttpStatusCallbackResult>)>();
}

class WINHTTP_ASYNC_RESULT extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int dwResult;

  @ffi.UnsignedLong()
  external int dwError;
}

typedef WINHTTP_STATUS_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.UnsignedLongLong,
            ffi.UnsignedLong, ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>>;

class WINHTTP_AUTOPROXY_OPTIONS extends ffi.Struct {
  @ffi.UnsignedLong()
  external int dwFlags;

  @ffi.UnsignedLong()
  external int dwAutoDetectFlags;

  external ffi.Pointer<ffi.WChar> lpszAutoConfigUrl;

  external ffi.Pointer<ffi.Void> lpvReserved;

  @ffi.UnsignedLong()
  external int dwReserved;

  @win32.BOOL()
  external int fAutoLogonIfChallenged;
}

class WINHTTP_PROXY_INFO extends ffi.Struct {
  @ffi.UnsignedLong()
  external int dwAccessType;

  external ffi.Pointer<ffi.WChar> lpszProxy;

  external ffi.Pointer<ffi.WChar> lpszProxyBypass;
}

class WINHTTP_PROXY_RESULT extends ffi.Struct {
  @ffi.UnsignedLong()
  external int cEntries;

  external ffi.Pointer<WINHTTP_PROXY_RESULT_ENTRY> pEntries;
}

class WINHTTP_PROXY_RESULT_ENTRY extends ffi.Struct {
  @win32.BOOL()
  external int fProxy;

  @win32.BOOL()
  external int fBypass;

  @ffi.Int()
  external int ProxyScheme;

  external ffi.Pointer<ffi.WChar> pwszProxy;

  @ffi.UnsignedShort()
  external int ProxyPort;
}

class WINHTTP_CURRENT_USER_IE_PROXY_CONFIG extends ffi.Struct {
  @win32.BOOL()
  external int fAutoDetect;

  external ffi.Pointer<ffi.WChar> lpszAutoConfigUrl;

  external ffi.Pointer<ffi.WChar> lpszProxy;

  external ffi.Pointer<ffi.WChar> lpszProxyBypass;
}

class WinHttpStatusCallbackResult extends ffi.Struct {
  external ffi.Pointer<ffi.Void> hInternet;

  @ffi.UnsignedLong()
  external int dwInternetStatus;

  external ffi.Pointer<ffi.Void> lpvStatusInformation;
}

const int ERROR_IO_PENDING = 997;

const int WINHTTP_FLAG_ASYNC = 268435456;

const int WINHTTP_FLAG_SECURE_DEFAULTS = 805306368;

const int WINHTTP_FLAG_SECURE = 8388608;

const int WINHTTP_FLAG_ESCAPE_PERCENT = 4;

const int WINHTTP_FLAG_NULL_CODEPAGE = 8;

const int WINHTTP_FLAG_BYPASS_PROXY_CACHE = 256;

const int WINHTTP_FLAG_REFRESH = 256;

const int WINHTTP_FLAG_ESCAPE_DISABLE = 64;

const int WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = 128;

const int INTERNET_SCHEME_HTTP = 1;

const int INTERNET_SCHEME_HTTPS = 2;

const int INTERNET_SCHEME_FTP = 3;

const int INTERNET_SCHEME_SOCKS = 4;

const int WINHTTP_AUTOPROXY_AUTO_DETECT = 1;

const int WINHTTP_AUTOPROXY_CONFIG_URL = 2;

const int WINHTTP_AUTOPROXY_HOST_KEEPCASE = 4;

const int WINHTTP_AUTOPROXY_HOST_LOWERCASE = 8;

const int WINHTTP_AUTOPROXY_ALLOW_AUTOCONFIG = 256;

const int WINHTTP_AUTOPROXY_ALLOW_STATIC = 512;

const int WINHTTP_AUTOPROXY_ALLOW_CM = 1024;

const int WINHTTP_AUTOPROXY_RUN_INPROCESS = 65536;

const int WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = 131072;

const int WINHTTP_AUTOPROXY_NO_DIRECTACCESS = 262144;

const int WINHTTP_AUTOPROXY_NO_CACHE_CLIENT = 524288;

const int WINHTTP_AUTOPROXY_NO_CACHE_SVC = 1048576;

const int WINHTTP_AUTOPROXY_SORT_RESULTS = 4194304;

const int WINHTTP_AUTO_DETECT_TYPE_DHCP = 1;

const int WINHTTP_AUTO_DETECT_TYPE_DNS_A = 2;

const int WINHTTP_PROXY_TYPE_DIRECT = 1;

const int WINHTTP_PROXY_TYPE_PROXY = 2;

const int WINHTTP_PROXY_TYPE_AUTO_PROXY_URL = 4;

const int WINHTTP_PROXY_TYPE_AUTO_DETECT = 8;

const int WINHTTP_REQUEST_STAT_FLAG_TCP_FAST_OPEN = 1;

const int WINHTTP_REQUEST_STAT_FLAG_TLS_SESSION_RESUMPTION = 2;

const int WINHTTP_REQUEST_STAT_FLAG_TLS_FALSE_START = 4;

const int WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_SESSION_RESUMPTION = 8;

const int WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_FALSE_START = 16;

const int WINHTTP_REQUEST_STAT_FLAG_FIRST_REQUEST = 32;

const int WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION = 1;

const int WINHTTP_MATCH_CONNECTION_GUID_FLAGS_MASK = 1;

const int WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT = 1;

const int WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE = 2;

const int WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL = 4;

const int WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL = 8;

const int WINHTTP_QUERY_CONNECTION_GROUP_FLAG_INSECURE = 1;

const int WINHTTP_TIME_FORMAT_BUFSIZE = 62;

const int WINHTTP_FIRST_OPTION = 1;

const int WINHTTP_OPTION_CALLBACK = 1;

const int WINHTTP_OPTION_RESOLVE_TIMEOUT = 2;

const int WINHTTP_OPTION_CONNECT_TIMEOUT = 3;

const int WINHTTP_OPTION_CONNECT_RETRIES = 4;

const int WINHTTP_OPTION_SEND_TIMEOUT = 5;

const int WINHTTP_OPTION_RECEIVE_TIMEOUT = 6;

const int WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = 7;

const int WINHTTP_OPTION_HANDLE_TYPE = 9;

const int WINHTTP_OPTION_READ_BUFFER_SIZE = 12;

const int WINHTTP_OPTION_WRITE_BUFFER_SIZE = 13;

const int WINHTTP_OPTION_PARENT_HANDLE = 21;

const int WINHTTP_OPTION_EXTENDED_ERROR = 24;

const int WINHTTP_OPTION_SECURITY_FLAGS = 31;

const int WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = 32;

const int WINHTTP_OPTION_URL = 34;

const int WINHTTP_OPTION_SECURITY_KEY_BITNESS = 36;

const int WINHTTP_OPTION_PROXY = 38;

const int WINHTTP_OPTION_PROXY_RESULT_ENTRY = 39;

const int WINHTTP_OPTION_USER_AGENT = 41;

const int WINHTTP_OPTION_CONTEXT_VALUE = 45;

const int WINHTTP_OPTION_CLIENT_CERT_CONTEXT = 47;

const int WINHTTP_OPTION_REQUEST_PRIORITY = 58;

const int WINHTTP_OPTION_HTTP_VERSION = 59;

const int WINHTTP_OPTION_DISABLE_FEATURE = 63;

const int WINHTTP_OPTION_CODEPAGE = 68;

const int WINHTTP_OPTION_MAX_CONNS_PER_SERVER = 73;

const int WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = 74;

const int WINHTTP_OPTION_AUTOLOGON_POLICY = 77;

const int WINHTTP_OPTION_SERVER_CERT_CONTEXT = 78;

const int WINHTTP_OPTION_ENABLE_FEATURE = 79;

const int WINHTTP_OPTION_WORKER_THREAD_COUNT = 80;

const int WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = 81;

const int WINHTTP_OPTION_PASSPORT_COBRANDING_URL = 82;

const int WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = 83;

const int WINHTTP_OPTION_SECURE_PROTOCOLS = 84;

const int WINHTTP_OPTION_ENABLETRACING = 85;

const int WINHTTP_OPTION_PASSPORT_SIGN_OUT = 86;

const int WINHTTP_OPTION_PASSPORT_RETURN_URL = 87;

const int WINHTTP_OPTION_REDIRECT_POLICY = 88;

const int WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = 89;

const int WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = 90;

const int WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = 91;

const int WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = 92;

const int WINHTTP_OPTION_CONNECTION_INFO = 93;

const int WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST = 94;

const int WINHTTP_OPTION_SPN = 96;

const int WINHTTP_OPTION_GLOBAL_PROXY_CREDS = 97;

const int WINHTTP_OPTION_GLOBAL_SERVER_CREDS = 98;

const int WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT = 99;

const int WINHTTP_OPTION_REJECT_USERPWD_IN_URL = 100;

const int WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS = 101;

const int WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE = 103;

const int WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE = 104;

const int WINHTTP_OPTION_SERVER_SPN_USED = 106;

const int WINHTTP_OPTION_PROXY_SPN_USED = 107;

const int WINHTTP_OPTION_SERVER_CBT = 108;

const int WINHTTP_OPTION_UNSAFE_HEADER_PARSING = 110;

const int WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS = 111;

const int WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET = 114;

const int WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT = 115;

const int WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL = 116;

const int WINHTTP_OPTION_DECOMPRESSION = 118;

const int WINHTTP_OPTION_WEB_SOCKET_RECEIVE_BUFFER_SIZE = 122;

const int WINHTTP_OPTION_WEB_SOCKET_SEND_BUFFER_SIZE = 123;

const int WINHTTP_OPTION_TCP_PRIORITY_HINT = 128;

const int WINHTTP_OPTION_CONNECTION_FILTER = 131;

const int WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL = 133;

const int WINHTTP_OPTION_HTTP_PROTOCOL_USED = 134;

const int WINHTTP_OPTION_KDC_PROXY_SETTINGS = 136;

const int WINHTTP_OPTION_PROXY_DISABLE_SERVICE_CALLS = 137;

const int WINHTTP_OPTION_ENCODE_EXTRA = 138;

const int WINHTTP_OPTION_DISABLE_STREAM_QUEUE = 139;

const int WINHTTP_OPTION_IPV6_FAST_FALLBACK = 140;

const int WINHTTP_OPTION_CONNECTION_STATS_V0 = 141;

const int WINHTTP_OPTION_REQUEST_TIMES = 142;

const int WINHTTP_OPTION_EXPIRE_CONNECTION = 143;

const int WINHTTP_OPTION_DISABLE_SECURE_PROTOCOL_FALLBACK = 144;

const int WINHTTP_OPTION_HTTP_PROTOCOL_REQUIRED = 145;

const int WINHTTP_OPTION_REQUEST_STATS = 146;

const int WINHTTP_OPTION_SERVER_CERT_CHAIN_CONTEXT = 147;

const int WINHTTP_OPTION_CONNECTION_STATS_V1 = 150;

const int WINHTTP_OPTION_SECURITY_INFO = 151;

const int WINHTTP_OPTION_TCP_KEEPALIVE = 152;

const int WINHTTP_OPTION_TCP_FAST_OPEN = 153;

const int WINHTTP_OPTION_TLS_FALSE_START = 154;

const int WINHTTP_OPTION_IGNORE_CERT_REVOCATION_OFFLINE = 155;

const int WINHTTP_OPTION_SOURCE_ADDRESS = 156;

const int WINHTTP_OPTION_HEAP_EXTENSION = 157;

const int WINHTTP_OPTION_TLS_PROTOCOL_INSECURE_FALLBACK = 158;

const int WINHTTP_OPTION_STREAM_ERROR_CODE = 159;

const int WINHTTP_OPTION_REQUIRE_STREAM_END = 160;

const int WINHTTP_OPTION_ENABLE_HTTP2_PLUS_CLIENT_CERT = 161;

const int WINHTTP_OPTION_FAILED_CONNECTION_RETRIES = 162;

const int WINHTTP_OPTION_SET_GLOBAL_CALLBACK = 163;

const int WINHTTP_OPTION_HTTP2_KEEPALIVE = 164;

const int WINHTTP_OPTION_RESOLUTION_HOSTNAME = 165;

const int WINHTTP_OPTION_SET_TOKEN_BINDING = 166;

const int WINHTTP_OPTION_TOKEN_BINDING_PUBLIC_KEY = 167;

const int WINHTTP_OPTION_REFERER_TOKEN_BINDING_HOSTNAME = 168;

const int WINHTTP_OPTION_HTTP2_PLUS_TRANSFER_ENCODING = 169;

const int WINHTTP_OPTION_RESOLVER_CACHE_CONFIG = 170;

const int WINHTTP_OPTION_DISABLE_CERT_CHAIN_BUILDING = 171;

const int WINHTTP_OPTION_BACKGROUND_CONNECTIONS = 172;

const int WINHTTP_OPTION_FIRST_AVAILABLE_CONNECTION = 173;

const int WINHTTP_OPTION_ENABLE_TEST_SIGNING = 174;

const int WINHTTP_OPTION_NTSERVICE_FLAG_TEST = 175;

const int WINHTTP_OPTION_DISABLE_PROXY_LINK_LOCAL_NAME_RESOLUTION = 176;

const int WINHTTP_OPTION_TCP_PRIORITY_STATUS = 177;

const int WINHTTP_OPTION_CONNECTION_GUID = 178;

const int WINHTTP_OPTION_MATCH_CONNECTION_GUID = 179;

const int WINHTTP_OPTION_PROXY_CONFIG_INFO = 180;

const int WINHTTP_OPTION_AGGREGATE_PROXY_CONFIG = 181;

const int WINHTTP_OPTION_SELECTED_PROXY_CONFIG_INFO = 182;

const int WINHTTP_OPTION_HTTP2_RECEIVE_WINDOW = 183;

const int WINHTTP_LAST_OPTION = 183;

const int WINHTTP_OPTION_USERNAME = 4096;

const int WINHTTP_OPTION_PASSWORD = 4097;

const int WINHTTP_OPTION_PROXY_USERNAME = 4098;

const int WINHTTP_OPTION_PROXY_PASSWORD = 4099;

const int WINHTTP_CONNS_PER_SERVER_UNLIMITED = 4294967295;

const int WINHTTP_CONNECTION_RETRY_CONDITION_408 = 1;

const int WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE = 2;

const int WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION = 4;

const int WINHTTP_CONNECTION_RETRY_CONDITION_MASK = 7;

const int WINHTTP_DECOMPRESSION_FLAG_GZIP = 1;

const int WINHTTP_DECOMPRESSION_FLAG_DEFLATE = 2;

const int WINHTTP_DECOMPRESSION_FLAG_ALL = 3;

const int WINHTTP_PROTOCOL_FLAG_HTTP2 = 1;

const int WINHTTP_PROTOCOL_FLAG_HTTP3 = 2;

const int WINHTTP_PROTOCOL_MASK = 3;

const int WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = 0;

const int WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = 1;

const int WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = 2;

const int WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT = 0;

const int WINHTTP_OPTION_REDIRECT_POLICY_NEVER = 0;

const int WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 1;

const int WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = 2;

const int WINHTTP_OPTION_REDIRECT_POLICY_LAST = 2;

const int WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT = 1;

const int WINHTTP_DISABLE_PASSPORT_AUTH = 0;

const int WINHTTP_ENABLE_PASSPORT_AUTH = 268435456;

const int WINHTTP_DISABLE_PASSPORT_KEYRING = 536870912;

const int WINHTTP_ENABLE_PASSPORT_KEYRING = 1073741824;

const int WINHTTP_DISABLE_COOKIES = 1;

const int WINHTTP_DISABLE_REDIRECTS = 2;

const int WINHTTP_DISABLE_AUTHENTICATION = 4;

const int WINHTTP_DISABLE_KEEP_ALIVE = 8;

const int WINHTTP_ENABLE_SSL_REVOCATION = 1;

const int WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = 2;

const int WINHTTP_DISABLE_SPN_SERVER_PORT = 0;

const int WINHTTP_ENABLE_SPN_SERVER_PORT = 1;

const int WINHTTP_OPTION_SPN_MASK = 1;

const int WINHTTP_HANDLE_TYPE_SESSION = 1;

const int WINHTTP_HANDLE_TYPE_CONNECT = 2;

const int WINHTTP_HANDLE_TYPE_REQUEST = 3;

const int WINHTTP_AUTH_SCHEME_BASIC = 1;

const int WINHTTP_AUTH_SCHEME_NTLM = 2;

const int WINHTTP_AUTH_SCHEME_PASSPORT = 4;

const int WINHTTP_AUTH_SCHEME_DIGEST = 8;

const int WINHTTP_AUTH_SCHEME_NEGOTIATE = 16;

const int WINHTTP_AUTH_TARGET_SERVER = 0;

const int WINHTTP_AUTH_TARGET_PROXY = 1;

const int WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED = 1;

const int WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT = 2;

const int WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED = 4;

const int WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA = 8;

const int WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID = 16;

const int WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID = 32;

const int WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE = 64;

const int WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = 2147483648;

const int WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = 8;

const int WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = 32;

const int WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = 128;

const int WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = 512;

const int WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = 2048;

const int WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_3 = 8192;

const int WINHTTP_FLAG_SECURE_PROTOCOL_ALL = 168;

const int WINHTTP_CALLBACK_STATUS_RESOLVING_NAME = 1;

const int WINHTTP_CALLBACK_STATUS_NAME_RESOLVED = 2;

const int WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER = 4;

const int WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER = 8;

const int WINHTTP_CALLBACK_STATUS_SENDING_REQUEST = 16;

const int WINHTTP_CALLBACK_STATUS_REQUEST_SENT = 32;

const int WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE = 64;

const int WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED = 128;

const int WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION = 256;

const int WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED = 512;

const int WINHTTP_CALLBACK_STATUS_HANDLE_CREATED = 1024;

const int WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING = 2048;

const int WINHTTP_CALLBACK_STATUS_DETECTING_PROXY = 4096;

const int WINHTTP_CALLBACK_STATUS_REDIRECT = 16384;

const int WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE = 32768;

const int WINHTTP_CALLBACK_STATUS_SECURE_FAILURE = 65536;

const int WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE = 131072;

const int WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE = 262144;

const int WINHTTP_CALLBACK_STATUS_READ_COMPLETE = 524288;

const int WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE = 1048576;

const int WINHTTP_CALLBACK_STATUS_REQUEST_ERROR = 2097152;

const int WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE = 4194304;

const int WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = 16777216;

const int WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE = 33554432;

const int WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE = 67108864;

const int WINHTTP_CALLBACK_STATUS_SETTINGS_WRITE_COMPLETE = 268435456;

const int WINHTTP_CALLBACK_STATUS_SETTINGS_READ_COMPLETE = 536870912;

const int API_GET_PROXY_FOR_URL = 6;

const int WINHTTP_CALLBACK_FLAG_RESOLVE_NAME = 3;

const int WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER = 12;

const int WINHTTP_CALLBACK_FLAG_SEND_REQUEST = 48;

const int WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE = 192;

const int WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION = 768;

const int WINHTTP_CALLBACK_FLAG_HANDLES = 3072;

const int WINHTTP_CALLBACK_FLAG_DETECTING_PROXY = 4096;

const int WINHTTP_CALLBACK_FLAG_REDIRECT = 16384;

const int WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE = 32768;

const int WINHTTP_CALLBACK_FLAG_SECURE_FAILURE = 65536;

const int WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE = 4194304;

const int WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE = 131072;

const int WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE = 262144;

const int WINHTTP_CALLBACK_FLAG_READ_COMPLETE = 524288;

const int WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE = 1048576;

const int WINHTTP_CALLBACK_FLAG_REQUEST_ERROR = 2097152;

const int WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE = 16777216;

const int WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS = 25034752;

const int WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = 4294967295;

const int WINHTTP_QUERY_MIME_VERSION = 0;

const int WINHTTP_QUERY_CONTENT_TYPE = 1;

const int WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2;

const int WINHTTP_QUERY_CONTENT_ID = 3;

const int WINHTTP_QUERY_CONTENT_DESCRIPTION = 4;

const int WINHTTP_QUERY_CONTENT_LENGTH = 5;

const int WINHTTP_QUERY_CONTENT_LANGUAGE = 6;

const int WINHTTP_QUERY_ALLOW = 7;

const int WINHTTP_QUERY_PUBLIC = 8;

const int WINHTTP_QUERY_DATE = 9;

const int WINHTTP_QUERY_EXPIRES = 10;

const int WINHTTP_QUERY_LAST_MODIFIED = 11;

const int WINHTTP_QUERY_MESSAGE_ID = 12;

const int WINHTTP_QUERY_URI = 13;

const int WINHTTP_QUERY_DERIVED_FROM = 14;

const int WINHTTP_QUERY_COST = 15;

const int WINHTTP_QUERY_LINK = 16;

const int WINHTTP_QUERY_PRAGMA = 17;

const int WINHTTP_QUERY_VERSION = 18;

const int WINHTTP_QUERY_STATUS_CODE = 19;

const int WINHTTP_QUERY_STATUS_TEXT = 20;

const int WINHTTP_QUERY_RAW_HEADERS = 21;

const int WINHTTP_QUERY_RAW_HEADERS_CRLF = 22;

const int WINHTTP_QUERY_CONNECTION = 23;

const int WINHTTP_QUERY_ACCEPT = 24;

const int WINHTTP_QUERY_ACCEPT_CHARSET = 25;

const int WINHTTP_QUERY_ACCEPT_ENCODING = 26;

const int WINHTTP_QUERY_ACCEPT_LANGUAGE = 27;

const int WINHTTP_QUERY_AUTHORIZATION = 28;

const int WINHTTP_QUERY_CONTENT_ENCODING = 29;

const int WINHTTP_QUERY_FORWARDED = 30;

const int WINHTTP_QUERY_FROM = 31;

const int WINHTTP_QUERY_IF_MODIFIED_SINCE = 32;

const int WINHTTP_QUERY_LOCATION = 33;

const int WINHTTP_QUERY_ORIG_URI = 34;

const int WINHTTP_QUERY_REFERER = 35;

const int WINHTTP_QUERY_RETRY_AFTER = 36;

const int WINHTTP_QUERY_SERVER = 37;

const int WINHTTP_QUERY_TITLE = 38;

const int WINHTTP_QUERY_USER_AGENT = 39;

const int WINHTTP_QUERY_WWW_AUTHENTICATE = 40;

const int WINHTTP_QUERY_PROXY_AUTHENTICATE = 41;

const int WINHTTP_QUERY_ACCEPT_RANGES = 42;

const int WINHTTP_QUERY_SET_COOKIE = 43;

const int WINHTTP_QUERY_COOKIE = 44;

const int WINHTTP_QUERY_REQUEST_METHOD = 45;

const int WINHTTP_QUERY_REFRESH = 46;

const int WINHTTP_QUERY_CONTENT_DISPOSITION = 47;

const int WINHTTP_QUERY_AGE = 48;

const int WINHTTP_QUERY_CACHE_CONTROL = 49;

const int WINHTTP_QUERY_CONTENT_BASE = 50;

const int WINHTTP_QUERY_CONTENT_LOCATION = 51;

const int WINHTTP_QUERY_CONTENT_MD5 = 52;

const int WINHTTP_QUERY_CONTENT_RANGE = 53;

const int WINHTTP_QUERY_ETAG = 54;

const int WINHTTP_QUERY_HOST = 55;

const int WINHTTP_QUERY_IF_MATCH = 56;

const int WINHTTP_QUERY_IF_NONE_MATCH = 57;

const int WINHTTP_QUERY_IF_RANGE = 58;

const int WINHTTP_QUERY_IF_UNMODIFIED_SINCE = 59;

const int WINHTTP_QUERY_MAX_FORWARDS = 60;

const int WINHTTP_QUERY_PROXY_AUTHORIZATION = 61;

const int WINHTTP_QUERY_RANGE = 62;

const int WINHTTP_QUERY_TRANSFER_ENCODING = 63;

const int WINHTTP_QUERY_UPGRADE = 64;

const int WINHTTP_QUERY_VARY = 65;

const int WINHTTP_QUERY_VIA = 66;

const int WINHTTP_QUERY_WARNING = 67;

const int WINHTTP_QUERY_EXPECT = 68;

const int WINHTTP_QUERY_PROXY_CONNECTION = 69;

const int WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = 70;

const int WINHTTP_QUERY_PROXY_SUPPORT = 75;

const int WINHTTP_QUERY_AUTHENTICATION_INFO = 76;

const int WINHTTP_QUERY_PASSPORT_URLS = 77;

const int WINHTTP_QUERY_PASSPORT_CONFIG = 78;

const int WINHTTP_QUERY_MAX = 78;

const int WINHTTP_QUERY_EX_ALL_HEADERS = 21;

const int WINHTTP_QUERY_CUSTOM = 65535;

const int WINHTTP_QUERY_FLAG_REQUEST_HEADERS = 2147483648;

const int WINHTTP_QUERY_FLAG_SYSTEMTIME = 1073741824;

const int WINHTTP_QUERY_FLAG_NUMBER = 536870912;

const int WINHTTP_QUERY_FLAG_NUMBER64 = 134217728;

const int WINHTTP_QUERY_FLAG_TRAILERS = 33554432;

const int WINHTTP_QUERY_FLAG_WIRE_ENCODING = 16777216;

const int WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0;

const int WINHTTP_ACCESS_TYPE_NO_PROXY = 1;

const int WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3;

const int WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY = 4;

const int WINHTTP_NO_PROXY_NAME = 0;

const int WINHTTP_NO_PROXY_BYPASS = 0;

const int WINHTTP_NO_CLIENT_CERT_CONTEXT = 0;

const int WINHTTP_NO_REFERER = 0;

const int WINHTTP_DEFAULT_ACCEPT_TYPES = 0;

const int WINHTTP_ADDREQ_INDEX_MASK = 65535;

const int WINHTTP_ADDREQ_FLAGS_MASK = 4294901760;

const int WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = 268435456;

const int WINHTTP_ADDREQ_FLAG_ADD = 536870912;

const int WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 1073741824;

const int WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 16777216;

const int WINHTTP_ADDREQ_FLAG_COALESCE = 1073741824;

const int WINHTTP_ADDREQ_FLAG_REPLACE = 2147483648;

const int WINHTTP_EXTENDED_HEADER_FLAG_UNICODE = 1;

const int WINHTTP_READ_DATA_EX_FLAG_FILL_BUFFER = 1;

const int WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH = 0;

const int WINHTTP_NO_ADDITIONAL_HEADERS = 0;

const int WINHTTP_NO_REQUEST_DATA = 0;

const int WINHTTP_HEADER_NAME_BY_INDEX = 0;

const int WINHTTP_NO_OUTPUT_BUFFER = 0;

const int WINHTTP_NO_HEADER_INDEX = 0;

const int WINHTTP_ERROR_BASE = 12000;

const int WINHTTP_ERROR_LAST = 12192;

const int WINHTTP_RESET_STATE = 1;

const int WINHTTP_RESET_SWPAD_CURRENT_NETWORK = 2;

const int WINHTTP_RESET_SWPAD_ALL = 4;

const int WINHTTP_RESET_SCRIPT_CACHE = 8;

const int WINHTTP_RESET_ALL = 65535;

const int WINHTTP_RESET_NOTIFY_NETWORK_CHANGED = 65536;

const int WINHTTP_RESET_OUT_OF_PROC = 131072;

const int WINHTTP_RESET_DISCARD_RESOLVERS = 262144;

const int WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123;

const int WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE = 15000;
