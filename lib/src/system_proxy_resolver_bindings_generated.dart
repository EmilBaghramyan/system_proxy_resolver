// ignore_for_file: type=lint

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/system_proxy_resolver.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SystemProxyResolverBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SystemProxyResolverBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SystemProxyResolverBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void initializeSystemProxyResolver(
    ffi.Pointer<ffi.Void> apiDlData,
  ) {
    return _initializeSystemProxyResolver(
      apiDlData,
    );
  }

  late final _initializeSystemProxyResolverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'initializeSystemProxyResolver');
  late final _initializeSystemProxyResolver = _initializeSystemProxyResolverPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<GetSystemProxySettingsResult> getSystemProxySettings() {
    return _getSystemProxySettings();
  }

  late final _getSystemProxySettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GetSystemProxySettingsResult>
              Function()>>('getSystemProxySettings');
  late final _getSystemProxySettings = _getSystemProxySettingsPtr
      .asFunction<ffi.Pointer<GetSystemProxySettingsResult> Function()>();

  void getProxyForUrl(
    ffi.Pointer<ffi.Char> url,
    int port,
  ) {
    return _getProxyForUrl(
      url,
      port,
    );
  }

  late final _getProxyForUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, Dart_Port_DL)>>('getProxyForUrl');
  late final _getProxyForUrl = _getProxyForUrlPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void freeGetSystemProxySettingsResult(
    ffi.Pointer<GetSystemProxySettingsResult> result,
  ) {
    return _freeGetSystemProxySettingsResult(
      result,
    );
  }

  late final _freeGetSystemProxySettingsResultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GetSystemProxySettingsResult>)>>(
      'freeGetSystemProxySettingsResult');
  late final _freeGetSystemProxySettingsResult =
      _freeGetSystemProxySettingsResultPtr.asFunction<
          void Function(ffi.Pointer<GetSystemProxySettingsResult>)>();

  void freeGetProxyForUrlResult(
    ffi.Pointer<GetProxyForUrlResult> result,
  ) {
    return _freeGetProxyForUrlResult(
      result,
    );
  }

  late final _freeGetProxyForUrlResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GetProxyForUrlResult>)>>('freeGetProxyForUrlResult');
  late final _freeGetProxyForUrlResult = _freeGetProxyForUrlResultPtr
      .asFunction<void Function(ffi.Pointer<GetProxyForUrlResult>)>();
}

abstract class FailureType {
  static const int FailureType_WindowsErrorCode = 0;
  static const int FailureType_Message = 1;
}

class Failure extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedLong()
  external int windowsErrorCode;

  external ffi.Pointer<ffi.Char> message;
}

abstract class ProxyType {
  static const int ProxyType_Direct = 0;
  static const int ProxyType_Http = 1;
  static const int ProxyType_Https = 2;
  static const int ProxyType_Ftp = 3;
  static const int ProxyType_Socks = 4;
}

class ProxyCredentials extends ffi.Struct {
  external ffi.Pointer<ffi.Char> username;

  external ffi.Pointer<ffi.Char> password;
}

class Proxy extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Char> host;

  @ffi.Uint16()
  external int port;

  external ProxyCredentials credentials;
}

class SystemProxySettings extends ffi.Struct {
  @ffi.Bool()
  external bool autoDiscoveryEnabled;

  external ffi.Pointer<ffi.Char> autoConfigUrl;

  external Proxy httpProxy;

  external Proxy httpsProxy;

  external Proxy ftpProxy;

  external Proxy socksProxy;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> bypassHostnames;

  @ffi.UnsignedInt()
  external int bypassHostnamesLength;

  @ffi.Bool()
  external bool bypassSimpleHostnames;
}

class GetSystemProxySettingsResult extends ffi.Struct {
  @ffi.Bool()
  external bool success;

  external UnnamedUnion2 value;
}

class UnnamedUnion2 extends ffi.Union {
  external SystemProxySettings success;

  external Failure failure;
}

class GetProxyForUrlResult extends ffi.Struct {
  @ffi.Bool()
  external bool success;

  external UnnamedUnion3 value;
}

class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct1 success;

  external Failure failure;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int chainLength;

  external ffi.Pointer<Proxy> chain;
}

/// ============================================================================
/// IMPORTANT! Never update these signatures without properly updating
/// DART_API_DL_MAJOR_VERSION and DART_API_DL_MINOR_VERSION.
///
/// Verbatim copy of `dart_native_api.h` and `dart_api.h` symbol names and types
/// to trigger compile-time errors if the sybols in those files are updated
/// without updating these.
///
/// Function return and argument types, and typedefs are carbon copied. Structs
/// are typechecked nominally in C/C++, so they are not copied, instead a
/// comment is added to their definition.
typedef Dart_Port_DL = ffi.Int64;
