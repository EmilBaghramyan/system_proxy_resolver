// ignore_for_file: type=lint
export 'core_foundation_shims.dart';

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'core_foundation_shims.dart' as shims;

/// Bindings for `CFNetwork/CFProxySupport.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CoreFoundationBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CoreFoundationBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CoreFoundationBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<CFAllocator>> _kCFAllocatorDefault =
      _lookup<ffi.Pointer<CFAllocator>>('kCFAllocatorDefault');

  ffi.Pointer<CFAllocator> get kCFAllocatorDefault =>
      _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(ffi.Pointer<CFAllocator> value) =>
      _kCFAllocatorDefault.value = value;

  int CFGetTypeID(
    shims.CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(shims.CFTypeRef)>>(
          'CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(shims.CFTypeRef)>();

  shims.CFTypeRef CFRetain(
    shims.CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<shims.CFTypeRef Function(shims.CFTypeRef)>>(
          'CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<shims.CFTypeRef Function(shims.CFTypeRef)>();

  void CFRelease(
    shims.CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(shims.CFTypeRef)>>(
          'CFRelease');
  late final _CFRelease =
      _CFReleasePtr.asFunction<void Function(shims.CFTypeRef)>();

  int CFGetRetainCount(
    shims.CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(shims.CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(shims.CFTypeRef)>();

  bool CFEqual(
    shims.CFTypeRef cf1,
    shims.CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(shims.CFTypeRef, shims.CFTypeRef)>>('CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<bool Function(shims.CFTypeRef, shims.CFTypeRef)>();

  ffi.Pointer<CFString> CFCopyDescription(
    shims.CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CFString> Function(shims.CFTypeRef)>>(
      'CFCopyDescription');
  late final _CFCopyDescription = _CFCopyDescriptionPtr.asFunction<
      ffi.Pointer<CFString> Function(shims.CFTypeRef)>();

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  int CFArrayGetCount(
    ffi.Pointer<CFArray> theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<CFArray>)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(ffi.Pointer<CFArray>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    ffi.Pointer<CFArray> theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CFArray>, ffi.Long)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CFArray>, int)>();

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    ffi.Pointer<CFDictionary> theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<CFDictionary>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<CFDictionary>, ffi.Pointer<ffi.Void>)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  ffi.Pointer<CFString> CFStringCreateWithBytes(
    ffi.Pointer<CFAllocator> alloc,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int numBytes,
    int encoding,
    bool isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFString> Function(
              ffi.Pointer<CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.UnsignedInt,
              ffi.Bool)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      ffi.Pointer<CFString> Function(ffi.Pointer<CFAllocator>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, bool)>();

  int CFStringGetLength(
    ffi.Pointer<CFString> theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<CFString>)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(ffi.Pointer<CFString>)>();

  int CFStringGetBytes(
    ffi.Pointer<CFString> theString,
    CFRange range,
    int encoding,
    int lossByte,
    bool isExternalRepresentation,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int maxBufLen,
    ffi.Pointer<ffi.Long> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<CFString>,
              CFRange,
              ffi.UnsignedInt,
              ffi.UnsignedChar,
              ffi.Bool,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<ffi.Long>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(ffi.Pointer<CFString>, CFRange, int, int, bool,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Long>)>();

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  bool CFBooleanGetValue(
    ffi.Pointer<CFBoolean> boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<CFBoolean>)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<bool Function(ffi.Pointer<CFBoolean>)>();

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  bool CFNumberGetValue(
    ffi.Pointer<CFNumber> number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<CFNumber>, ffi.Long,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      bool Function(ffi.Pointer<CFNumber>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CFURL> CFURLCreateWithString(
    ffi.Pointer<CFAllocator> allocator,
    ffi.Pointer<CFString> URLString,
    ffi.Pointer<CFURL> baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFURL> Function(
              ffi.Pointer<CFAllocator>,
              ffi.Pointer<CFString>,
              ffi.Pointer<CFURL>)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      ffi.Pointer<CFURL> Function(ffi.Pointer<CFAllocator>,
          ffi.Pointer<CFString>, ffi.Pointer<CFURL>)>();

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFRunLoopDefaultMode =
      _lookup<ffi.Pointer<CFString>>('kCFRunLoopDefaultMode');

  ffi.Pointer<CFString> get kCFRunLoopDefaultMode =>
      _kCFRunLoopDefaultMode.value;

  set kCFRunLoopDefaultMode(ffi.Pointer<CFString> value) =>
      _kCFRunLoopDefaultMode.value = value;

  ffi.Pointer<CFRunLoop> CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFRunLoop> Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<ffi.Pointer<CFRunLoop> Function()>();

  int CFRunLoopRunInMode(
    ffi.Pointer<CFString> mode,
    double seconds,
    bool returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CFString>, ffi.Double,
              ffi.Bool)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(ffi.Pointer<CFString>, double, bool)>();

  void CFRunLoopAddSource(
    ffi.Pointer<CFRunLoop> rl,
    ffi.Pointer<CFRunLoopSource> source,
    ffi.Pointer<CFString> mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CFRunLoop>,
              ffi.Pointer<CFRunLoopSource>,
              ffi.Pointer<CFString>)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(ffi.Pointer<CFRunLoop>, ffi.Pointer<CFRunLoopSource>,
          ffi.Pointer<CFString>)>();

  ffi.Pointer<CFDictionary> CFNetworkCopySystemProxySettings() {
    return _CFNetworkCopySystemProxySettings();
  }

  late final _CFNetworkCopySystemProxySettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFDictionary> Function()>>(
          'CFNetworkCopySystemProxySettings');
  late final _CFNetworkCopySystemProxySettings =
      _CFNetworkCopySystemProxySettingsPtr.asFunction<
          ffi.Pointer<CFDictionary> Function()>();

  ffi.Pointer<CFArray> CFNetworkCopyProxiesForURL(
    ffi.Pointer<CFURL> url,
    ffi.Pointer<CFDictionary> proxySettings,
  ) {
    return _CFNetworkCopyProxiesForURL(
      url,
      proxySettings,
    );
  }

  late final _CFNetworkCopyProxiesForURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFArray> Function(ffi.Pointer<CFURL>,
              ffi.Pointer<CFDictionary>)>>('CFNetworkCopyProxiesForURL');
  late final _CFNetworkCopyProxiesForURL =
      _CFNetworkCopyProxiesForURLPtr.asFunction<
          ffi.Pointer<CFArray> Function(
              ffi.Pointer<CFURL>, ffi.Pointer<CFDictionary>)>();

  ffi.Pointer<CFRunLoopSource> CFNetworkExecuteProxyAutoConfigurationURL(
    ffi.Pointer<CFURL> proxyAutoConfigURL,
    ffi.Pointer<CFURL> targetURL,
    CFProxyAutoConfigurationResultCallback cb,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFNetworkExecuteProxyAutoConfigurationURL(
      proxyAutoConfigURL,
      targetURL,
      cb,
      clientContext,
    );
  }

  late final _CFNetworkExecuteProxyAutoConfigurationURLPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CFRunLoopSource> Function(
                  ffi.Pointer<CFURL>,
                  ffi.Pointer<CFURL>,
                  CFProxyAutoConfigurationResultCallback,
                  ffi.Pointer<CFStreamClientContext>)>>(
      'CFNetworkExecuteProxyAutoConfigurationURL');
  late final _CFNetworkExecuteProxyAutoConfigurationURL =
      _CFNetworkExecuteProxyAutoConfigurationURLPtr.asFunction<
          ffi.Pointer<CFRunLoopSource> Function(
              ffi.Pointer<CFURL>,
              ffi.Pointer<CFURL>,
              CFProxyAutoConfigurationResultCallback,
              ffi.Pointer<CFStreamClientContext>)>();

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeKey');

  ffi.Pointer<CFString> get kCFProxyTypeKey => _kCFProxyTypeKey.value;

  set kCFProxyTypeKey(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyHostNameKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyHostNameKey');

  ffi.Pointer<CFString> get kCFProxyHostNameKey => _kCFProxyHostNameKey.value;

  set kCFProxyHostNameKey(ffi.Pointer<CFString> value) =>
      _kCFProxyHostNameKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyPortNumberKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyPortNumberKey');

  ffi.Pointer<CFString> get kCFProxyPortNumberKey =>
      _kCFProxyPortNumberKey.value;

  set kCFProxyPortNumberKey(ffi.Pointer<CFString> value) =>
      _kCFProxyPortNumberKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFProxyAutoConfigurationURLKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyAutoConfigurationURLKey');

  ffi.Pointer<CFString> get kCFProxyAutoConfigurationURLKey =>
      _kCFProxyAutoConfigurationURLKey.value;

  set kCFProxyAutoConfigurationURLKey(ffi.Pointer<CFString> value) =>
      _kCFProxyAutoConfigurationURLKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFProxyAutoConfigurationJavaScriptKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyAutoConfigurationJavaScriptKey');

  ffi.Pointer<CFString> get kCFProxyAutoConfigurationJavaScriptKey =>
      _kCFProxyAutoConfigurationJavaScriptKey.value;

  set kCFProxyAutoConfigurationJavaScriptKey(ffi.Pointer<CFString> value) =>
      _kCFProxyAutoConfigurationJavaScriptKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyUsernameKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyUsernameKey');

  ffi.Pointer<CFString> get kCFProxyUsernameKey => _kCFProxyUsernameKey.value;

  set kCFProxyUsernameKey(ffi.Pointer<CFString> value) =>
      _kCFProxyUsernameKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyPasswordKey =
      _lookup<ffi.Pointer<CFString>>('kCFProxyPasswordKey');

  ffi.Pointer<CFString> get kCFProxyPasswordKey => _kCFProxyPasswordKey.value;

  set kCFProxyPasswordKey(ffi.Pointer<CFString> value) =>
      _kCFProxyPasswordKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeNone =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeNone');

  ffi.Pointer<CFString> get kCFProxyTypeNone => _kCFProxyTypeNone.value;

  set kCFProxyTypeNone(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeNone.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeHTTP =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeHTTP');

  ffi.Pointer<CFString> get kCFProxyTypeHTTP => _kCFProxyTypeHTTP.value;

  set kCFProxyTypeHTTP(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeHTTP.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeHTTPS =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeHTTPS');

  ffi.Pointer<CFString> get kCFProxyTypeHTTPS => _kCFProxyTypeHTTPS.value;

  set kCFProxyTypeHTTPS(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeHTTPS.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeSOCKS =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeSOCKS');

  ffi.Pointer<CFString> get kCFProxyTypeSOCKS => _kCFProxyTypeSOCKS.value;

  set kCFProxyTypeSOCKS(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeSOCKS.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFProxyTypeFTP =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeFTP');

  ffi.Pointer<CFString> get kCFProxyTypeFTP => _kCFProxyTypeFTP.value;

  set kCFProxyTypeFTP(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeFTP.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFProxyTypeAutoConfigurationURL =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeAutoConfigurationURL');

  ffi.Pointer<CFString> get kCFProxyTypeAutoConfigurationURL =>
      _kCFProxyTypeAutoConfigurationURL.value;

  set kCFProxyTypeAutoConfigurationURL(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeAutoConfigurationURL.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFProxyTypeAutoConfigurationJavaScript =
      _lookup<ffi.Pointer<CFString>>('kCFProxyTypeAutoConfigurationJavaScript');

  ffi.Pointer<CFString> get kCFProxyTypeAutoConfigurationJavaScript =>
      _kCFProxyTypeAutoConfigurationJavaScript.value;

  set kCFProxyTypeAutoConfigurationJavaScript(ffi.Pointer<CFString> value) =>
      _kCFProxyTypeAutoConfigurationJavaScript.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFProxyAutoConfigurationHTTPResponseKey =
      _lookup<ffi.Pointer<CFString>>(
          'kCFProxyAutoConfigurationHTTPResponseKey');

  ffi.Pointer<CFString> get kCFProxyAutoConfigurationHTTPResponseKey =>
      _kCFProxyAutoConfigurationHTTPResponseKey.value;

  set kCFProxyAutoConfigurationHTTPResponseKey(ffi.Pointer<CFString> value) =>
      _kCFProxyAutoConfigurationHTTPResponseKey.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesExceptionsList =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesExceptionsList');

  ffi.Pointer<CFString> get kCFNetworkProxiesExceptionsList =>
      _kCFNetworkProxiesExceptionsList.value;

  set kCFNetworkProxiesExceptionsList(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesExceptionsList.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesExcludeSimpleHostnames =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesExcludeSimpleHostnames');

  ffi.Pointer<CFString> get kCFNetworkProxiesExcludeSimpleHostnames =>
      _kCFNetworkProxiesExcludeSimpleHostnames.value;

  set kCFNetworkProxiesExcludeSimpleHostnames(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesExcludeSimpleHostnames.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesFTPEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesFTPEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesFTPEnable =>
      _kCFNetworkProxiesFTPEnable.value;

  set kCFNetworkProxiesFTPEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesFTPEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesFTPPassive =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesFTPPassive');

  ffi.Pointer<CFString> get kCFNetworkProxiesFTPPassive =>
      _kCFNetworkProxiesFTPPassive.value;

  set kCFNetworkProxiesFTPPassive(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesFTPPassive.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesFTPPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesFTPPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesFTPPort =>
      _kCFNetworkProxiesFTPPort.value;

  set kCFNetworkProxiesFTPPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesFTPPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesFTPProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesFTPProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesFTPProxy =>
      _kCFNetworkProxiesFTPProxy.value;

  set kCFNetworkProxiesFTPProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesFTPProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesGopherEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesGopherEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesGopherEnable =>
      _kCFNetworkProxiesGopherEnable.value;

  set kCFNetworkProxiesGopherEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesGopherEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesGopherPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesGopherPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesGopherPort =>
      _kCFNetworkProxiesGopherPort.value;

  set kCFNetworkProxiesGopherPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesGopherPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesGopherProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesGopherProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesGopherProxy =>
      _kCFNetworkProxiesGopherProxy.value;

  set kCFNetworkProxiesGopherProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesGopherProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPEnable =>
      _kCFNetworkProxiesHTTPEnable.value;

  set kCFNetworkProxiesHTTPEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPPort =>
      _kCFNetworkProxiesHTTPPort.value;

  set kCFNetworkProxiesHTTPPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPProxy =>
      _kCFNetworkProxiesHTTPProxy.value;

  set kCFNetworkProxiesHTTPProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPSEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPSEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPSEnable =>
      _kCFNetworkProxiesHTTPSEnable.value;

  set kCFNetworkProxiesHTTPSEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPSEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPSPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPSPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPSPort =>
      _kCFNetworkProxiesHTTPSPort.value;

  set kCFNetworkProxiesHTTPSPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPSPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesHTTPSProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesHTTPSProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesHTTPSProxy =>
      _kCFNetworkProxiesHTTPSProxy.value;

  set kCFNetworkProxiesHTTPSProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesHTTPSProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesRTSPEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesRTSPEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesRTSPEnable =>
      _kCFNetworkProxiesRTSPEnable.value;

  set kCFNetworkProxiesRTSPEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesRTSPEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesRTSPPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesRTSPPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesRTSPPort =>
      _kCFNetworkProxiesRTSPPort.value;

  set kCFNetworkProxiesRTSPPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesRTSPPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesRTSPProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesRTSPProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesRTSPProxy =>
      _kCFNetworkProxiesRTSPProxy.value;

  set kCFNetworkProxiesRTSPProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesRTSPProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesSOCKSEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesSOCKSEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesSOCKSEnable =>
      _kCFNetworkProxiesSOCKSEnable.value;

  set kCFNetworkProxiesSOCKSEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesSOCKSEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesSOCKSPort =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesSOCKSPort');

  ffi.Pointer<CFString> get kCFNetworkProxiesSOCKSPort =>
      _kCFNetworkProxiesSOCKSPort.value;

  set kCFNetworkProxiesSOCKSPort(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesSOCKSPort.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFNetworkProxiesSOCKSProxy =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesSOCKSProxy');

  ffi.Pointer<CFString> get kCFNetworkProxiesSOCKSProxy =>
      _kCFNetworkProxiesSOCKSProxy.value;

  set kCFNetworkProxiesSOCKSProxy(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesSOCKSProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesProxyAutoConfigEnable =
      _lookup<ffi.Pointer<CFString>>('kCFNetworkProxiesProxyAutoConfigEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesProxyAutoConfigEnable =>
      _kCFNetworkProxiesProxyAutoConfigEnable.value;

  set kCFNetworkProxiesProxyAutoConfigEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesProxyAutoConfigEnable.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesProxyAutoConfigURLString =
      _lookup<ffi.Pointer<CFString>>(
          'kCFNetworkProxiesProxyAutoConfigURLString');

  ffi.Pointer<CFString> get kCFNetworkProxiesProxyAutoConfigURLString =>
      _kCFNetworkProxiesProxyAutoConfigURLString.value;

  set kCFNetworkProxiesProxyAutoConfigURLString(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesProxyAutoConfigURLString.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesProxyAutoConfigJavaScript =
      _lookup<ffi.Pointer<CFString>>(
          'kCFNetworkProxiesProxyAutoConfigJavaScript');

  ffi.Pointer<CFString> get kCFNetworkProxiesProxyAutoConfigJavaScript =>
      _kCFNetworkProxiesProxyAutoConfigJavaScript.value;

  set kCFNetworkProxiesProxyAutoConfigJavaScript(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesProxyAutoConfigJavaScript.value = value;

  late final ffi.Pointer<ffi.Pointer<CFString>>
      _kCFNetworkProxiesProxyAutoDiscoveryEnable =
      _lookup<ffi.Pointer<CFString>>(
          'kCFNetworkProxiesProxyAutoDiscoveryEnable');

  ffi.Pointer<CFString> get kCFNetworkProxiesProxyAutoDiscoveryEnable =>
      _kCFNetworkProxiesProxyAutoDiscoveryEnable.value;

  set kCFNetworkProxiesProxyAutoDiscoveryEnable(ffi.Pointer<CFString> value) =>
      _kCFNetworkProxiesProxyAutoDiscoveryEnable.value = value;

  void initializeProxyResolverRunLoop(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Int64, ffi.Pointer<Dart_CObject>)>>
        postCObject,
    int portId,
  ) {
    return _initializeProxyResolverRunLoop(
      postCObject,
      portId,
    );
  }

  late final _initializeProxyResolverRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(ffi.Int64, ffi.Pointer<Dart_CObject>)>>,
              ffi.Int64)>>('initializeProxyResolverRunLoop');
  late final _initializeProxyResolverRunLoop =
      _initializeProxyResolverRunLoopPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(ffi.Int64, ffi.Pointer<Dart_CObject>)>>,
              int)>();

  late final ffi.Pointer<CFProxyAutoConfigurationResultCallback>
      _proxyAutoConfigurationResultCallback =
      _lookup<CFProxyAutoConfigurationResultCallback>(
          'proxyAutoConfigurationResultCallback');

  CFProxyAutoConfigurationResultCallback
      get proxyAutoConfigurationResultCallback =>
          _proxyAutoConfigurationResultCallback.value;

  set proxyAutoConfigurationResultCallback(
          CFProxyAutoConfigurationResultCallback value) =>
      _proxyAutoConfigurationResultCallback.value = value;

  void freeCFProxyAutoConfigurationResult(
    ffi.Pointer<CFProxyAutoConfigurationResult> result,
  ) {
    return _freeCFProxyAutoConfigurationResult(
      result,
    );
  }

  late final _freeCFProxyAutoConfigurationResultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CFProxyAutoConfigurationResult>)>>(
      'freeCFProxyAutoConfigurationResult');
  late final _freeCFProxyAutoConfigurationResult =
      _freeCFProxyAutoConfigurationResultPtr.asFunction<
          void Function(ffi.Pointer<CFProxyAutoConfigurationResult>)>();
}

class CFAllocator extends ffi.Opaque {}

class CFString extends ffi.Opaque {}

class CFArray extends ffi.Opaque {}

class CFDictionary extends ffi.Opaque {}

class CFRange extends ffi.Struct {
  @ffi.Long()
  external int location;

  @ffi.Long()
  external int length;
}

class CFBoolean extends ffi.Opaque {}

class CFNumber extends ffi.Opaque {}

class CFURL extends ffi.Opaque {}

class CFRunLoop extends ffi.Opaque {}

class CFRunLoopSource extends ffi.Opaque {}

typedef CFProxyAutoConfigurationResultCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<CFArray>,
            ffi.Pointer<CFError>)>>;

class CFError extends ffi.Opaque {}

class CFStreamClientContext extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CFString> Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class Dart_CObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 value;
}

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
///
/// Note that Dart_CObject_kNativePointer is intended for internal use by
/// dart:io implementation and has no connection to dart:ffi Pointer class.
/// It represents a pointer to a native resource of a known type.
/// The receiving side will only see this pointer as an integer and will not
/// see the specified finalizer.
/// The specified finalizer will only be invoked if the message is not delivered.
abstract class Dart_CObject_Type {
  static const int Dart_CObject_kNull = 0;
  static const int Dart_CObject_kBool = 1;
  static const int Dart_CObject_kInt32 = 2;
  static const int Dart_CObject_kInt64 = 3;
  static const int Dart_CObject_kDouble = 4;
  static const int Dart_CObject_kString = 5;
  static const int Dart_CObject_kArray = 6;
  static const int Dart_CObject_kTypedData = 7;
  static const int Dart_CObject_kExternalTypedData = 8;
  static const int Dart_CObject_kUnmodifiableExternalTypedData = 9;
  static const int Dart_CObject_kSendPort = 10;
  static const int Dart_CObject_kCapability = 11;
  static const int Dart_CObject_kNativePointer = 12;
  static const int Dart_CObject_kUnsupported = 13;
  static const int Dart_CObject_kNumberOfTypes = 14;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Bool()
  external bool as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<ffi.Char> as_string;

  external UnnamedStruct1 as_send_port;

  external UnnamedStruct2 as_capability;

  external UnnamedStruct3 as_array;

  external UnnamedStruct4 as_typed_data;

  external UnnamedStruct5 as_external_typed_data;

  external UnnamedStruct6 as_native_pointer;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int64()
  external int id;

  @ffi.Int64()
  external int origin_id;
}

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<Dart_CObject>> values;
}

class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  /// in elements, not bytes
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

/// ==========
/// Typed Data
/// ==========
abstract class Dart_TypedData_Type {
  static const int Dart_TypedData_kByteData = 0;
  static const int Dart_TypedData_kInt8 = 1;
  static const int Dart_TypedData_kUint8 = 2;
  static const int Dart_TypedData_kUint8Clamped = 3;
  static const int Dart_TypedData_kInt16 = 4;
  static const int Dart_TypedData_kUint16 = 5;
  static const int Dart_TypedData_kInt32 = 6;
  static const int Dart_TypedData_kUint32 = 7;
  static const int Dart_TypedData_kInt64 = 8;
  static const int Dart_TypedData_kUint64 = 9;
  static const int Dart_TypedData_kFloat32 = 10;
  static const int Dart_TypedData_kFloat64 = 11;
  static const int Dart_TypedData_kInt32x4 = 12;
  static const int Dart_TypedData_kFloat32x4 = 13;
  static const int Dart_TypedData_kFloat64x2 = 14;
  static const int Dart_TypedData_kInvalid = 15;
}

class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  /// in elements, not bytes
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      callback;
}

class UnnamedStruct6 extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      callback;
}

class CFProxyAutoConfigurationResult extends ffi.Struct {
  external ffi.Pointer<CFArray> proxyList;

  external ffi.Pointer<CFError> error;
}

const int kCFStringEncodingMacRoman = 0;

const int kCFStringEncodingWindowsLatin1 = 1280;

const int kCFStringEncodingISOLatin1 = 513;

const int kCFStringEncodingNextStepLatin = 2817;

const int kCFStringEncodingASCII = 1536;

const int kCFStringEncodingUnicode = 256;

const int kCFStringEncodingUTF8 = 134217984;

const int kCFStringEncodingNonLossyASCII = 3071;

const int kCFStringEncodingUTF16 = 256;

const int kCFStringEncodingUTF16BE = 268435712;

const int kCFStringEncodingUTF16LE = 335544576;

const int kCFStringEncodingUTF32 = 201326848;

const int kCFStringEncodingUTF32BE = 402653440;

const int kCFStringEncodingUTF32LE = 469762304;

const int kCFNumberSInt8Type = 1;

const int kCFNumberSInt16Type = 2;

const int kCFNumberSInt32Type = 3;

const int kCFNumberSInt64Type = 4;

const int kCFNumberFloat32Type = 5;

const int kCFNumberFloat64Type = 6;

const int kCFNumberCharType = 7;

const int kCFNumberShortType = 8;

const int kCFNumberIntType = 9;

const int kCFNumberLongType = 10;

const int kCFNumberLongLongType = 11;

const int kCFNumberFloatType = 12;

const int kCFNumberDoubleType = 13;

const int kCFNumberCFIndexType = 14;

const int kCFNumberNSIntegerType = 15;

const int kCFNumberCGFloatType = 16;

const int kCFNumberMaxType = 16;

const int kCFStringEncodingMacJapanese = 1;

const int kCFStringEncodingMacChineseTrad = 2;

const int kCFStringEncodingMacKorean = 3;

const int kCFStringEncodingMacArabic = 4;

const int kCFStringEncodingMacHebrew = 5;

const int kCFStringEncodingMacGreek = 6;

const int kCFStringEncodingMacCyrillic = 7;

const int kCFStringEncodingMacDevanagari = 9;

const int kCFStringEncodingMacGurmukhi = 10;

const int kCFStringEncodingMacGujarati = 11;

const int kCFStringEncodingMacOriya = 12;

const int kCFStringEncodingMacBengali = 13;

const int kCFStringEncodingMacTamil = 14;

const int kCFStringEncodingMacTelugu = 15;

const int kCFStringEncodingMacKannada = 16;

const int kCFStringEncodingMacMalayalam = 17;

const int kCFStringEncodingMacSinhalese = 18;

const int kCFStringEncodingMacBurmese = 19;

const int kCFStringEncodingMacKhmer = 20;

const int kCFStringEncodingMacThai = 21;

const int kCFStringEncodingMacLaotian = 22;

const int kCFStringEncodingMacGeorgian = 23;

const int kCFStringEncodingMacArmenian = 24;

const int kCFStringEncodingMacChineseSimp = 25;

const int kCFStringEncodingMacTibetan = 26;

const int kCFStringEncodingMacMongolian = 27;

const int kCFStringEncodingMacEthiopic = 28;

const int kCFStringEncodingMacCentralEurRoman = 29;

const int kCFStringEncodingMacVietnamese = 30;

const int kCFStringEncodingMacExtArabic = 31;

const int kCFStringEncodingMacSymbol = 33;

const int kCFStringEncodingMacDingbats = 34;

const int kCFStringEncodingMacTurkish = 35;

const int kCFStringEncodingMacCroatian = 36;

const int kCFStringEncodingMacIcelandic = 37;

const int kCFStringEncodingMacRomanian = 38;

const int kCFStringEncodingMacCeltic = 39;

const int kCFStringEncodingMacGaelic = 40;

const int kCFStringEncodingMacFarsi = 140;

const int kCFStringEncodingMacUkrainian = 152;

const int kCFStringEncodingMacInuit = 236;

const int kCFStringEncodingMacVT100 = 252;

const int kCFStringEncodingMacHFS = 255;

const int kCFStringEncodingISOLatin2 = 514;

const int kCFStringEncodingISOLatin3 = 515;

const int kCFStringEncodingISOLatin4 = 516;

const int kCFStringEncodingISOLatinCyrillic = 517;

const int kCFStringEncodingISOLatinArabic = 518;

const int kCFStringEncodingISOLatinGreek = 519;

const int kCFStringEncodingISOLatinHebrew = 520;

const int kCFStringEncodingISOLatin5 = 521;

const int kCFStringEncodingISOLatin6 = 522;

const int kCFStringEncodingISOLatinThai = 523;

const int kCFStringEncodingISOLatin7 = 525;

const int kCFStringEncodingISOLatin8 = 526;

const int kCFStringEncodingISOLatin9 = 527;

const int kCFStringEncodingISOLatin10 = 528;

const int kCFStringEncodingDOSLatinUS = 1024;

const int kCFStringEncodingDOSGreek = 1029;

const int kCFStringEncodingDOSBalticRim = 1030;

const int kCFStringEncodingDOSLatin1 = 1040;

const int kCFStringEncodingDOSGreek1 = 1041;

const int kCFStringEncodingDOSLatin2 = 1042;

const int kCFStringEncodingDOSCyrillic = 1043;

const int kCFStringEncodingDOSTurkish = 1044;

const int kCFStringEncodingDOSPortuguese = 1045;

const int kCFStringEncodingDOSIcelandic = 1046;

const int kCFStringEncodingDOSHebrew = 1047;

const int kCFStringEncodingDOSCanadianFrench = 1048;

const int kCFStringEncodingDOSArabic = 1049;

const int kCFStringEncodingDOSNordic = 1050;

const int kCFStringEncodingDOSRussian = 1051;

const int kCFStringEncodingDOSGreek2 = 1052;

const int kCFStringEncodingDOSThai = 1053;

const int kCFStringEncodingDOSJapanese = 1056;

const int kCFStringEncodingDOSChineseSimplif = 1057;

const int kCFStringEncodingDOSKorean = 1058;

const int kCFStringEncodingDOSChineseTrad = 1059;

const int kCFStringEncodingWindowsLatin2 = 1281;

const int kCFStringEncodingWindowsCyrillic = 1282;

const int kCFStringEncodingWindowsGreek = 1283;

const int kCFStringEncodingWindowsLatin5 = 1284;

const int kCFStringEncodingWindowsHebrew = 1285;

const int kCFStringEncodingWindowsArabic = 1286;

const int kCFStringEncodingWindowsBalticRim = 1287;

const int kCFStringEncodingWindowsVietnamese = 1288;

const int kCFStringEncodingWindowsKoreanJohab = 1296;

const int kCFStringEncodingANSEL = 1537;

const int kCFStringEncodingJIS_X0201_76 = 1568;

const int kCFStringEncodingJIS_X0208_83 = 1569;

const int kCFStringEncodingJIS_X0208_90 = 1570;

const int kCFStringEncodingJIS_X0212_90 = 1571;

const int kCFStringEncodingJIS_C6226_78 = 1572;

const int kCFStringEncodingShiftJIS_X0213 = 1576;

const int kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577;

const int kCFStringEncodingGB_2312_80 = 1584;

const int kCFStringEncodingGBK_95 = 1585;

const int kCFStringEncodingGB_18030_2000 = 1586;

const int kCFStringEncodingKSC_5601_87 = 1600;

const int kCFStringEncodingKSC_5601_92_Johab = 1601;

const int kCFStringEncodingCNS_11643_92_P1 = 1617;

const int kCFStringEncodingCNS_11643_92_P2 = 1618;

const int kCFStringEncodingCNS_11643_92_P3 = 1619;

const int kCFStringEncodingISO_2022_JP = 2080;

const int kCFStringEncodingISO_2022_JP_2 = 2081;

const int kCFStringEncodingISO_2022_JP_1 = 2082;

const int kCFStringEncodingISO_2022_JP_3 = 2083;

const int kCFStringEncodingISO_2022_CN = 2096;

const int kCFStringEncodingISO_2022_CN_EXT = 2097;

const int kCFStringEncodingISO_2022_KR = 2112;

const int kCFStringEncodingEUC_JP = 2336;

const int kCFStringEncodingEUC_CN = 2352;

const int kCFStringEncodingEUC_TW = 2353;

const int kCFStringEncodingEUC_KR = 2368;

const int kCFStringEncodingShiftJIS = 2561;

const int kCFStringEncodingKOI8_R = 2562;

const int kCFStringEncodingBig5 = 2563;

const int kCFStringEncodingMacRomanLatin1 = 2564;

const int kCFStringEncodingHZ_GB_2312 = 2565;

const int kCFStringEncodingBig5_HKSCS_1999 = 2566;

const int kCFStringEncodingVISCII = 2567;

const int kCFStringEncodingKOI8_U = 2568;

const int kCFStringEncodingBig5_E = 2569;

const int kCFStringEncodingNextStepJapanese = 2818;

const int kCFStringEncodingEBCDIC_US = 3073;

const int kCFStringEncodingEBCDIC_CP037 = 3074;

const int kCFStringEncodingUTF7 = 67109120;

const int kCFStringEncodingUTF7_IMAP = 2576;

const int kCFStringEncodingShiftJIS_X0213_00 = 1576;
